apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.master.nameOverride }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.master.nameOverride }}
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.master.nameOverride }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.master.nameOverride }}
    spec:
      containers:
      - name: redis-stack
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["redis-server", "/opt/redis-stack/etc/redis-stack-master.conf"]
        volumeMounts:
        - name: redis-stack-master-config
          mountPath: /opt/redis-stack/etc/redis-stack-master.conf
          subPath: redis-stack-master.conf
        - name: redis-data
          mountPath: /data
        ports:
        - containerPort: 6379
      volumes:
      - name: redis-stack-master-config
        configMap:
          name: redis-stack-master-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: {{ .Values.master.persistence.storageClass }}
      resources:
        requests:
          storage: {{ .Values.master.persistence.size }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.replica.nameOverride }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.replica.nameOverride }}
  replicas: {{ .Values.replica.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.replica.nameOverride }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.replica.nameOverride }}
    spec:
      containers:
      - name: redis-stack
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["redis-server", "/opt/redis-stack/etc/redis-stack-replica.conf"]
        volumeMounts:
        - name: redis-stack-replica-config
          mountPath: /opt/redis-stack/etc/redis-stack-replica.conf
          subPath: redis-stack-replica.conf
        - name: redis-data
          mountPath: /data
        ports:
        - containerPort: 6379
      volumes:
      - name: redis-stack-replica-config
        configMap:
          name: redis-stack-replica-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: {{ .Values.replica.persistence.storageClass }}
      resources:
        requests:
          storage: {{ .Values.replica.persistence.size }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-stack-sentinel
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: redis-stack-sentinel
  replicas: {{ .Values.sentinel.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-stack-sentinel
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-stack-sentinel
    spec:
      initContainers:
      - name: init-sentinel-config
        image: redis:latest
        command:
          - sh
          - -c
          - |
            cp /readonly-config/sentinel.conf /etc/redis/sentinel.conf &&
            chmod 644 /etc/redis/sentinel.conf
        volumeMounts:
          - name: sentinel-config
            mountPath: /readonly-config/sentinel.conf
            subPath: sentinel.conf
          - name: sentinel-writable-config
            mountPath: /etc/redis

      containers:
      - name: redis-sentinel
        image: redis:latest
        command:
          - redis-sentinel
          - /etc/redis/sentinel.conf
        ports:
          - containerPort: 26379
        volumeMounts:
          - name: sentinel-writable-config
            mountPath: /etc/redis

      volumes:
        - name: sentinel-writable-config
          emptyDir: {}
        - name: sentinel-config
          configMap:
            name: redis-sentinel-config
